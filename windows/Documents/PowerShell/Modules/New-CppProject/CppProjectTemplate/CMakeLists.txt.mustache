cmake_minimum_required(VERSION 3.27)

project({{PROJECT_NAME_SNAKE_CASE}}
	VERSION 0.0.1
	DESCRIPTION "{{PROJECT_FRIENDLY_NAME}}"
	LANGUAGES CXX
)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules")

option({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_BUILD_EXE "Build main executable." ${PROJECT_IS_TOP_LEVEL})
option({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_GENERATE_DOCS "Generate documentation." ON)
option({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_BUILD_TESTS "Build unit tests." ${PROJECT_IS_TOP_LEVEL})
option({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_INSTALL "Install CMake targets." ${PROJECT_IS_TOP_LEVEL})

add_library(common_options INTERFACE)
target_compile_options(common_options
	INTERFACE
		$<$<CXX_COMPILER_ID:Clang,AppleClang,GNU>:
			-Wall
			-Wextra # reasonable and standard
			-Wextra-semi # Warn about semicolon after in-class function definition.
			-Wshadow # warn the user if a variable declaration shadows one from a parent context
			-Wnon-virtual-dtor # warn the user if a class with virtual functions has a non-virtual destructor. This helps
							# catch hard to track down memory errors
			-Wold-style-cast # warn for c-style casts
			-Wcast-align # warn for potential performance problem casts
			-Wunused # warn on anything being unused
			-Woverloaded-virtual # warn if you overload (not override) a virtual function
			-Wpedantic # warn if non-standard C++ is used
			-Wconversion # warn on type conversions that may lose data
			-Wsign-conversion # warn on sign conversions
			-Wnull-dereference # warn if a null dereference is detected
			-Wdouble-promotion # warn if float is implicit promoted to double
			-Wformat=2 # warn on security issues around functions that format output (ie printf)
			-Wimplicit-fallthrough # warn on statements that fallthrough without an explicit annotation
		>
		$<$<CXX_COMPILER_ID:GNU>:
			-Wmisleading-indentation # warn if indentation implies blocks where blocks do not exist
			-Wduplicated-cond # warn if if / else chain has duplicated conditions
			-Wduplicated-branches # warn if if / else branches have duplicated code
			-Wlogical-op # warn about logical operations being used where bitwise were probably wanted
			-Wuseless-cast # warn if you perform a cast to the same type
		>
		$<$<CXX_COMPILER_ID:MSVC>:
			/W4 # Baseline reasonable warnings
			/w14242 # 'identifier': conversion from 'type1' to 'type1', possible loss of data
			/w14254 # 'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data
			/w14263 # 'function': member function does not override any base class virtual member function
			/w14265 # 'classname': class has virtual functions, but destructor is not virtual instances of this class may not
					# be destructed correctly
			/w14287 # 'operator': unsigned/negative constant mismatch
			/we4289 # nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside
					# the for-loop scope
			/w14296 # 'operator': expression is always 'boolean_value'
			/w14311 # 'variable': pointer truncation from 'type1' to 'type2'
			/w14545 # expression before comma evaluates to a function which is missing an argument list
			/w14546 # function call before comma missing argument list
			/w14547 # 'operator': operator before comma has no effect; expected operator with side-effect
			/w14549 # 'operator': operator before comma has no effect; did you intend 'operator'?
			/w14555 # expression has no effect; expected expression with side- effect
			/w14619 # pragma warning: there is no warning number 'number'
			/w14640 # Enable warning on thread un-safe static member initialization
			/w14826 # Conversion from 'type1' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
			/w14905 # wide string literal cast to 'LPSTR'
			/w14906 # string literal cast to 'LPWSTR'
			/w14928 # illegal copy-initialization; more than one user-defined conversion has been implicitly applied
			/permissive- # standards conformance mode for MSVC compiler.
		>
)

include(FetchContent)
FetchContent_Declare(
	randutils
	URL https://gist.githubusercontent.com/krdehli/fdc85c195e2b5d217c0abfc31abdd2da/raw/a259fab9db7d74ce25c4f1edbf0349a88f0c014f/randutils.hpp
	URL_HASH SHA256=0BCB7C3DB03CA031A163A9E99FA4081C4D5F41AB0A5F966C7CFA39CB8BEB2BEC
	DOWNLOAD_NO_EXTRACT TRUE
)
FetchContent_MakeAvailable(
	randutils
)

find_package(Microsoft.GSL CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)

add_library({{PROJECT_NAME_SNAKE_CASE}}_lib
	src/{{PROJECT_NAME_SNAKE_CASE}}_lib.hpp
	src/{{PROJECT_NAME_SNAKE_CASE}}_lib.cpp
)

include(GNUInstallDirs)

target_compile_features({{PROJECT_NAME_SNAKE_CASE}}_lib
	PRIVATE
		cxx_std_23
)
target_include_directories({{PROJECT_NAME_SNAKE_CASE}}_lib
	PUBLIC
		$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
	PRIVATE
		${randutils_SOURCE_DIR}
)
target_link_libraries({{PROJECT_NAME_SNAKE_CASE}}_lib
	PRIVATE
		common_options
		Microsoft.GSL::GSL
		fmt::fmt
		spdlog::spdlog
)

if ({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_BUILD_EXE)
	add_executable({{PROJECT_NAME_SNAKE_CASE}}
		src/{{PROJECT_NAME_SNAKE_CASE}}.cpp
	)
	target_compile_features({{PROJECT_NAME_SNAKE_CASE}}
		PRIVATE
			cxx_std_23
	)
	target_include_directories({{PROJECT_NAME_SNAKE_CASE}}
		PUBLIC
			$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
			$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
		PRIVATE
			${randutils_SOURCE_DIR}
	)
	target_link_libraries({{PROJECT_NAME_SNAKE_CASE}}
		PRIVATE
			common_options
			{{PROJECT_NAME_SNAKE_CASE}}_lib
			Microsoft.GSL::GSL
			fmt::fmt
			spdlog::spdlog
	)
endif()

configure_file(
	"${CMAKE_CURRENT_SOURCE_DIR}/cmake/pkg-config.pc.in"
	"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	"${PROJECT_NAME}-config-version.cmake"
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY SameMajorVersion
	# Uncomment for header only libraries:
	# ARCH_INDEPENDENT 
)
configure_package_config_file(
	"${PROJECT_SOURCE_DIR}/cmake/config.cmake.in"
	"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
	INSTALL_DESTINATION "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}"
)

if({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_GENERATE_DOCS)
	add_subdirectory(docs)
endif()

if ({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_BUILD_TESTS)
	include(CTest)
	enable_testing()
	add_subdirectory(tests)
endif()

if({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_INSTALL)
	set(targets_to_install ${PROJECT_NAME}_lib common_options)
	if ({{PROJECT_NAME_CAPITAL_SNAKE_CASE}}_BUILD_EXE)
		list(APPEND targets_to_install ${PROJECT_NAME})
	endif()

	install(
		TARGETS ${targets_to_install}
		EXPORT ${PROJECT_NAME}-targets
		ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development
		LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Runtime
		RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT Runtime
	)
	install(
		EXPORT ${PROJECT_NAME}-targets
		FILE ${PROJECT_NAME}-targets.cmake
		NAMESPACE {{PROJECT_NAME_SNAKE_CASE}}::
		DESTINATION "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}"
	)
	install(
		FILES 
			"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
			"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
		DESTINATION "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}"
	)
	install(
		DIRECTORY "${PROJECT_SOURCE_DIR}/include"
		DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
	)
	install(
		TARGETS ${targets_to_install}
		DESTINATION "${CMAKE_INSTALL_BINDIR}"
	)
	install(
		FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
		DESTINATION "${CMAKE_INSTALL_DATADIR}/pkgconfig"
	)

	include(InstallRequiredSystemLibraries)
	set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")
	set(CPACK_PACKAGE_VERSION_MAJOR "${${PROJECT_NAME}_VERSION_MAJOR}")
	set(CPACK_PACKAGE_VESRION_MINOR "${${PROJECT_NAME}_VERSION_MINOR}")
	include(CPack)
endif()